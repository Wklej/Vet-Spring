[{"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js":"1","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js":"2","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js":"3","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js":"4","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js":"5","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js":"6","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js":"7","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js":"8","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js":"9","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js":"10","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js":"11","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js":"12","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js":"13","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js":"14","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js":"15","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js":"16","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Booking.js":"17","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Login.js":"18","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ClientPage.js":"19","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\VisitCalendar.js":"20","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\BookingPage.js":"21","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\WorkerPage.js":"22","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AdminPage.js":"23","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAddAdmin.js":"24","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalListAdmin.js":"25","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\VisitsAdmin.js":"26","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAddModal.js":"27","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\text.js":"28"},{"size":593,"mtime":1613383467681,"results":"29","hashOfConfig":"30"},{"size":3697,"mtime":1613383664605,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"30"},{"size":1308,"mtime":1613349836283,"results":"33","hashOfConfig":"30"},{"size":691,"mtime":1612881350819,"results":"34","hashOfConfig":"30"},{"size":7116,"mtime":1613134576964,"results":"35","hashOfConfig":"30"},{"size":9239,"mtime":1613346436194,"results":"36","hashOfConfig":"30"},{"size":1117,"mtime":1614253212949,"results":"37","hashOfConfig":"30"},{"size":10341,"mtime":1613341594283,"results":"38","hashOfConfig":"30"},{"size":6839,"mtime":1612297680322,"results":"39","hashOfConfig":"30"},{"size":6199,"mtime":1613340330871,"results":"40","hashOfConfig":"30"},{"size":6231,"mtime":1613384299371,"results":"41","hashOfConfig":"30"},{"size":8536,"mtime":1613059036107,"results":"42","hashOfConfig":"30"},{"size":6325,"mtime":1612958636116,"results":"43","hashOfConfig":"30"},{"size":9214,"mtime":1613348070889,"results":"44","hashOfConfig":"30"},{"size":6481,"mtime":1613384450840,"results":"45","hashOfConfig":"30"},{"size":2540,"mtime":1613346111044,"results":"46","hashOfConfig":"30"},{"size":4153,"mtime":1613350282168,"results":"47","hashOfConfig":"30"},{"size":3380,"mtime":1613347041487,"results":"48","hashOfConfig":"30"},{"size":8551,"mtime":1613346231647,"results":"49","hashOfConfig":"30"},{"size":7899,"mtime":1614262018631,"results":"50","hashOfConfig":"30"},{"size":2715,"mtime":1613347564940,"results":"51","hashOfConfig":"30"},{"size":2922,"mtime":1613348206296,"results":"52","hashOfConfig":"30"},{"size":6841,"mtime":1613337065446,"results":"53","hashOfConfig":"30"},{"size":11185,"mtime":1613348493781,"results":"54","hashOfConfig":"30"},{"size":8832,"mtime":1613348463040,"results":"55","hashOfConfig":"30"},{"size":4652,"mtime":1613340536013,"results":"56","hashOfConfig":"30"},{"size":230,"mtime":1613383701538,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1mage9g",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js",[],["133","134"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js",["135"],"import React, {Component} from \"react\";\r\nimport {Navbar, Nav, Image, Button} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\"\r\nimport img from \"../images/pet-shop.png\"\r\n\r\nexport default class NavBar extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            islogged: false,\r\n            //isloggedin: this.props.history.location.state.isloggedin,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Navbar style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.0)',\r\n                fontWeight: 'bold'\r\n            }}>\r\n                <Link to={\"\"} className={\"navbar-brand\"}>\r\n                    <Image src={img} style={{\r\n                        width: '120%',\r\n                        height: '120%'\r\n                    }}></Image>\r\n                </Link>\r\n\r\n                <Nav className=\"mr-auto\">\r\n                    {this.state.islogged === true && <Link to={\"\"}>logout</Link> }\r\n                </Nav>\r\n                <Nav className={\"ml-auto\"}>\r\n                    {this.state.islogged === false && <Link to=\"login\" className={\"nav-link\"}>Login</Link>}\r\n                    <Link to=\"addusers\" className={\"nav-link\"}>Register</Link>\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js",["136"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class Animal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\", ownerid: localStorage.getItem(\"userID\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n           this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ,\r\n            owner: {\r\n                \"id\": this.state.ownerid\r\n            }\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ,\r\n            owner: {\r\n                \"id\": this.state.ownerid\r\n            }\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    console.log(animal)\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"}\r\n                      style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black\"} name={\"age\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black\"} name={\"typ\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Animal List\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js",["137","138","139"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class AnimalList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userid: localStorage.getItem(\"userID\"),\r\n            animals: [],\r\n            data2: [],\r\n            currentPage: 1,\r\n            animalsPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Animals/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                data.map(animal => {\r\n                    if (animal.owner !== null) {\r\n                        if (animal.owner.id == this.state.userid) {\r\n                            this.state.data2.push(animal)\r\n                        }\r\n                     }\r\n                })\r\n\r\n                console.log(this.state.data2)\r\n                this.setState({\r\n                    \"animals\": this.state.data2\r\n                })\r\n            })\r\n    }\r\n\r\n    deleteAnimal = (animalId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Animals?index=\" + animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                        this.setState({\"show\":true});\r\n                        setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                        this.setState({\r\n                        animals: this.state.animals.filter(animal => animal.animalID !== animalId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            showModal: false\r\n\r\n        },\r\n        )\r\n    }\r\n\r\n    panel = () => {\r\n        return this.props.history.push(\"/clientpage\")\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const {animals, currentPage, animalsPerPage} = this.state;\r\n        const lastIndex = currentPage * animalsPerPage;\r\n        const firstIndex = lastIndex - animalsPerPage;\r\n        const currentAnimals = animals.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n\r\n        return(\r\n            <div>\r\n            <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                <MyToast show = {this.state.show} message = {\"Animal deleted Successfully.\"} type = {\"danger\"}/>\r\n            </div>\r\n            <Card className={\"border border-dark text-white bg-trans\"}>\r\n                <Card.Header>\r\n                    <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                        <FontAwesomeIcon icon={faList}/> Animal List\r\n                    </div>\r\n                    <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                        <Button size={\"sm\"} className={\"back-btn\"} onClick={this.panel}>\r\n                            Back to Panel\r\n                        </Button>\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <Button size={\"sm\"} onClick={this.handleShow}>\r\n                            Add Animal\r\n                        </Button>\r\n                    </div>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Table bordered hover striped variant={\"secondary bg-trans\"}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Age</th>\r\n                            <th>Type</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {animals.length === 0 ?\r\n                            <tr align={\"center\"}>\r\n                                <td colSpan={\"6\"}>{animals.length}</td>\r\n                            </tr>   :\r\n                            currentAnimals.map((animal) => (\r\n                                <tr key={animal.id}>\r\n                                    <td>\r\n                                        {animal.animalID}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.age}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.typ}\r\n                                    </td>\r\n                                    <td>\r\n                                        <ButtonGroup>\r\n                                            <Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                            <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteAnimal.bind(this, animal.animalID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                        </ButtonGroup>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <div style={{\"float\":\"left\", color: 'black'}}>\r\n                        Showing page {currentPage} of {totalPages}\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <InputGroup size={\"sm\"}>\r\n                            <InputGroup.Prepend>\r\n                                <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                onClick={this.firstPage}>\r\n                                    <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                        onClick={this.prevPage}>\r\n                                    <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                            onChange={this.changePage}/>\r\n                            <InputGroup.Append>\r\n                                <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.nextPage}>\r\n                                    <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.lastPage}>\r\n                                    <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose}>\r\n                        <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js",["140","141","142","143"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faList,\r\n    faEdit,\r\n    faTrash,\r\n    faStepBackward,\r\n    faStepForward,\r\n    faFastBackward,\r\n    faFastForward,\r\n    faSearch, faTimes\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class UserList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            usersSearch: [],\r\n            search: '',\r\n            currentPage: 1,\r\n            usersPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUsers()\r\n    };\r\n\r\n    getUsers = () => {\r\n        axios.get(\"http://localhost:8080/api/Users/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({users: data})\r\n            })\r\n    }\r\n\r\n    findUserByEmail = (userEmail) => {\r\n        this.state.users.map(user => {\r\n            if(user.email === userEmail){\r\n                this.state.usersSearch.push(user)\r\n            }\r\n        })\r\n    }\r\n\r\n    switchUsers = (email) => {\r\n        this.findUserByEmail(email)\r\n        this.setState({\r\n            \"users\": this.state.usersSearch\r\n        })\r\n    }\r\n\r\n    deleteUser = (userId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Users?index=\" + userId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        users: this.state.users.filter(user => user.id !== userId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    searchChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    cancelSearch = () => {\r\n        this.setState({\r\n            \"search\": '',\r\n            \"usersSearch\": []\r\n        })\r\n        this.getUsers()\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    panel = () => {\r\n        return this.props.history.push(\"/adminpage\")\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n        const {users, currentPage, usersPerPage, search} = this.state;\r\n        const lastIndex = currentPage * usersPerPage;\r\n        const firstIndex = lastIndex - usersPerPage;\r\n        const currentUsers = users.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"User deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white bg-trans\"}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Users List\r\n                        </div>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                             <Button className={\"back-btn\"} onClick={this.panel}>\r\n                                 Back to Panel\r\n                             </Button>\r\n                        </div>\r\n                        <div style={{\"float\":\"right\", fontWeight: 'bold', color: 'black'}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <FormControl placeholder={\"Search\"} name={\"search\"} value={search}\r\n                                             className={\"text-black info-border\"} onChange={this.searchChange} />\r\n                                    <InputGroup.Append>\r\n                                        <Button size={\"sm\"} variant={\"outline-info\"}\r\n                                                type={\"button\"} onClick={() => this.switchAnimals(search)}>\r\n                                            <FontAwesomeIcon icon={faSearch}/>\r\n                                        </Button>\r\n                                        <Button size={\"sm\"} variant={\"outline-danger\"}\r\n                                                type={\"button\"} onClick={this.cancelSearch}>\r\n                                            <FontAwesomeIcon icon={faTimes}/>\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Email</th>\r\n                                <th>Rank</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {users.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{users.length}</td>\r\n                                </tr>   :\r\n                                currentUsers.map((u) => (\r\n                                    <tr key={u.id}>\r\n                                        <td>\r\n                                            {u.id}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.rank}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"editu/\"+u.id} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteUser.bind(this, u.id)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js",["144","145","146"],"import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport {Button, Card, Form, Modal} from \"react-bootstrap\";\r\nimport Animal from \"./Animal\";\r\nimport MyToast from \"./MyToast\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ModalTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\", show: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n            this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div style={{\"display\": this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show={this.state.show} message={this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type={\"success\"}/>\r\n                </div>\r\n                <Modal show={this.state.show} onHide={this.handleClose} className={\"border border-dark bg-dark text-white\"}>\r\n                    <Modal.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Modal.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Modal.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"bg-dark text-white\"} name={\"name\"}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"bg-dark text-white\"} name={\"age\"}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"bg-dark text-white\"} name={\"typ\"}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave}/> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo}/> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList}/> Animal List\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}",["147","148"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js",["149","150","151","152"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class AnimalModal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\",\r\n        ownerid: localStorage.getItem(\"userID\"),\r\n        owner: [],\r\n        animals: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Users/?index=\" + this.state.ownerid)\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({owner: data})\r\n                console.log(this.state.owner)\r\n            })\r\n    }\r\n\r\n    getAnimals = () => {\r\n        axios.get(\"http://localhost:8080/api/Animals/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                data.map(animal => {\r\n                    if (animal.owner !== null) {\r\n                        if (animal.owner.id == this.state.userid) {\r\n                            this.state.animals.push(animal)\r\n                        }\r\n                    }\r\n                })\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateOwner = (a) => {\r\n\r\n        this.getAnimals()\r\n        this.state.animals.push(a)\r\n\r\n        this.setState({\r\n            \"owner.animal\": this.state.animals\r\n        })\r\n\r\n        console.log(this.state.owner)\r\n\r\n        axios.put(\"http://localhost:8080/api/Users\", this.state.owner)\r\n            .then(r => console.log(\"owner updated successfully\"))\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ,\r\n            owner: {\r\n                \"id\": this.state.ownerid\r\n            }\r\n        }\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.updateOwner(animal)\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black bg-trans\"}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black bg-trans\"} name={\"name\"}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black bg-trans\"} name={\"age\"}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black bg-trans\"} name={\"typ\"}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> Save\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.props.onClick}> Close\r\n                            </Button>{' '}\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js",["153","154"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\nimport \"./CSS/Style.css\"\r\n\r\nexport default class UserAdd extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.userChange = this.userChange.bind(this);\r\n        this.SubmitUser = this.SubmitUser.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", email: \"\", rank: \"\", password: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userId = +this.props.match.params.id;\r\n        if(userId != null){\r\n            this.finUserById(userId);\r\n        }\r\n    }\r\n\r\n    finUserById = (UserId) => {\r\n        axios.get(\"http://localhost:8080/api/Users?index=\"+UserId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        email: response.data.email,\r\n                        rank: response.data.rank,\r\n                        password: response.data.password\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            id : this.state.id,\r\n            password: this.state.password,\r\n            email: this.state.email,\r\n            rank: this.state.rank\r\n        }\r\n        console.log(user)\r\n\r\n        axios.put(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.usersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            email: this.state.email,\r\n            rank: \"CLIENT\",\r\n            password: this.state.password\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"post\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.panel(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    userChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n   panel = () => {\r\n        return this.props.history.push(\"/login\")\r\n    }\r\n\r\n    render() {\r\n        const {id, email, rank, password} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"User updated Successfully.\" : \"User saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black bg-trans\"}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update User\" : \" Add new User\"}</Card.Header>\r\n                    <Form id={\"UserFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateUser : this.SubmitUser} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Email\"\r\n                                                  className={\"text-black bg-trans\"} name={\"email\"}\r\n                                                  value={email} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"password\"} placeholder=\"Password\"\r\n                                                  className={\"text-black bg-trans\"}\r\n                                                  name={\"password\"}\r\n                                                  value={password} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            {this.state.id !== \"\" ?\r\n                                <Button variant=\"info\" type=\"button\" onClick={this.usersList.bind()}>\r\n                                    <FontAwesomeIcon icon={faList}/> Users List\r\n                                </Button> : null\r\n                            }\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js",["155","156"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class OrdersList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            orders: [],\r\n            currentPage: 1,\r\n            ordersPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Orders/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({orders: data})\r\n            })\r\n    };\r\n\r\n    deleteOrder = (orderId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Orders?index=\" + orderId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        orders: this.state.orders.filter(order => order.ordersID !== orderId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.orders.length / this.state.ordersPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {orders, currentPage, ordersPerPage} = this.state;\r\n        const lastIndex = currentPage * ordersPerPage;\r\n        const firstIndex = lastIndex - ordersPerPage;\r\n        const currentOrders = orders.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.orders.length / this.state.ordersPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Order deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Orders List\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Supply</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {orders.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{orders.length}</td>\r\n                                </tr>   :\r\n                                currentOrders.map((order) => (\r\n                                    <tr key={order.id}>\r\n                                        <td>\r\n                                            {order.ordersID}\r\n                                        </td>\r\n                                        <td>\r\n                                             {order.amount}  {order.name}s\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edito/\"+order.ordersID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteOrder.bind(this, order.ordersID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"bg-dark pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js",["157"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class OrderAdd extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.orderChange = this.orderChange.bind(this);\r\n        this.SubmitOrder = this.SubmitOrder.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        ordersID: \"\",\r\n        name: \"\",\r\n        amount: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const orderId = +this.props.match.params.id;\r\n        if(orderId != null){\r\n            this.finOrderById(orderId);\r\n        }\r\n    }\r\n\r\n    finOrderById = (OrderId) => {\r\n        axios.get(\"http://localhost:8080/api/Orders?index=\"+OrderId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        ordersID: response.data.ordersID,\r\n                        name: response.data.name,\r\n                        amount: response.data.amount\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateOrder = event => {\r\n        event.preventDefault();\r\n\r\n        const order = {\r\n            ordersID : this.state.ordersID,\r\n            name: this.state.name,\r\n            amount: this.state.amount\r\n        }\r\n        {console.log(order)}\r\n\r\n        axios.put(\"http://localhost:8080/api/Orders\", order)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.ordersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitOrder = event => {\r\n        event.preventDefault();\r\n\r\n        const order = {\r\n                name: this.state.name,\r\n                amount: this.state.amount\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Orders\", order)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"post\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    orderChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    ordersList = () => {\r\n        return this.props.history.push(\"/orders\")\r\n    }\r\n\r\n    render() {\r\n        const {ordersID, name, amount} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Order updated Successfully.\" : \"Order saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header><FontAwesomeIcon icon={ordersID !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {ordersID !== \"\" ? \" Update Order\" : \" Add new Order\"}</Card.Header>\r\n                    <Form id={\"OrderFormId\"} onSubmit={ordersID !== \"\" ?\r\n                        this.updateOrder : this.SubmitOrder} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.orderChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Amount</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"value\"} placeholder=\"Amount\"\r\n                                                  className={\"text-black\"} name={\"amount\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={amount} onChange={this.orderChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {ordersID !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            {ordersID !== \"\" ?\r\n                                <Button variant=\"info\" type=\"button\" onClick={this.ordersList.bind()}>\r\n                                    <FontAwesomeIcon icon={faList}/> Orders List\r\n                                </Button> : null\r\n                            }\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js",["158"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./CSS/Style.css\"\r\nimport SupplyAddModal from \"./SupplyAddModal\";\r\n\r\nexport default class Storage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            supplies: [],\r\n            currentPage: 1,\r\n            suppliesPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Supplies/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({supplies: data})\r\n            })\r\n    };\r\n\r\n    deleteSupply = (supplyId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Supplies?index=\" + supplyId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        supplies: this.state.supplies.filter(supply => supply.supplyID !== supplyId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            })\r\n    }\r\n\r\n    panel = () => {\r\n        console.log(localStorage.getItem(\"userRank\"))\r\n        if(localStorage.getItem(\"userRank\") === \"ADMIN\")\r\n            return this.props.history.push(\"/adminpage\")\r\n        else if(localStorage.getItem(\"userRank\") === \"WORKER\")\r\n            return this.props.history.push(\"/workerpage\")\r\n    }\r\n\r\n    render(){\r\n\r\n        const {supplies, currentPage, suppliesPerPage} = this.state;\r\n        const lastIndex = currentPage * suppliesPerPage;\r\n        const firstIndex = lastIndex - suppliesPerPage;\r\n        const currentSupplies = supplies.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Supply deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white bg-trans\"}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Storage\r\n                        </div>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <Button size={\"sm\"} className={\"back-btn\"} onClick={this.panel}>\r\n                                Back to Panel\r\n                            </Button>\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <Button size={\"sm\"} onClick={this.handleShow}>\r\n                                Add Supply\r\n                            </Button>\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary bg-trans\"}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Name</th>\r\n                                <th>Amount</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {supplies.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{supplies.length}</td>\r\n                                </tr>   :\r\n                                currentSupplies.map((supply) => (\r\n                                    <tr key={supply.id}>\r\n                                        <td>\r\n                                            {supply.supplyID}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.amount}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edits/\"+supply.supplyID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteSupply.bind(this, supply.supplyID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose}>\r\n                    <SupplyAddModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Booking.js",["159","160"],"import {React, Component} from \"react\";\r\nimport {Button, Col, Row, Container, Card} from \"react-bootstrap\";\r\nimport \"./CSS/Style.css\"\r\n\r\nexport default class Booking extends Component {\r\n\r\n    bookingPage = (prop) => {\r\n        return this.props.history.push({pathname: \"/bookingPage\", state: {day: prop}})\r\n    }\r\n\r\n    months(){\r\n        var tab = []\r\n        for(var i = 0; i < 4; i++){\r\n            tab.push(\r\n                <Row className=\"border border-right-0 border-bottom-0\"\r\n                     style={{backgroundColor: 'rgba(150, 150, 150, 0.5)', height: '16vh'}}>\r\n                    {this.day(i * 7)}\r\n                </Row>\r\n            )\r\n        }\r\n        return tab\r\n    }\r\n\r\n    day(x){\r\n        var tab = []\r\n        for(let i = 0; i < 7; i++){\r\n            let dayInt = i + x + 1\r\n            tab.push(\r\n            <Col className=\"day p-lg-2 border border-left-0 border-top-0 text-truncate \">\r\n                <Button className={\"btn-calendar\"} onClick={() => this.bookingPage(dayInt)}>\r\n                    <h5 className=\"row align-items-center\">\r\n                        <span className=\"date col-1\">{dayInt}</span>\r\n                    </h5>\r\n                </Button>\r\n                <p className=\"d-sm-none\">No events</p>\r\n            </Col>\r\n            )\r\n        }\r\n        return tab\r\n    }\r\n\r\n    panel = () => {\r\n        return this.props.history.push(\"/clientpage\")\r\n    }\r\n\r\n\r\nrender() {\r\n    return(\r\n        <div className=\"container-fluid\">\r\n            <div style={{\"float\":\"right\", fontWeight: 'bold', color: 'black'}}>\r\n                <Button className={\"back-btn\"} style={{marginLeft: 0}} onClick={this.panel}>\r\n                    Back to Panel\r\n                </Button>\r\n            </div>\r\n            <header>\r\n                <h1 className=\"display-5 mb-6 text-center\">February 2021</h1>\r\n                <div className=\"row d-none d-sm-flex p-1 bg-dark text-white\">\r\n                    <h5 className=\"col-sm p-1 text-center\">Monday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Tuesday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Wednesday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Thursday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Friday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Saturday</h5>\r\n                    <h5 className=\"col-sm p-1 text-center\">Sunday</h5>\r\n                </div>\r\n            </header>\r\n            {this.months()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Login.js",["161","162"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport \"./CSS/Style.css\"\r\n\r\nexport default class Login extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.userChange = this.userChange.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        users: [],\r\n        email: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Users/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({users: data})\r\n            })\r\n\r\n    }\r\n\r\n    findUser = (pass) => {\r\n        this.state.users.map(user => {\r\n            if(user.email === this.state.email){\r\n                if(user.password === pass){\r\n                    localStorage.setItem(\"userID\", user.id)\r\n                    localStorage.setItem(\"userRank\", user.rank)\r\n                    this.afterLoginPage(user)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    navbarChange = () => {\r\n        return this.props.history.push({pathname: \"/navbar\", state: {isloggedin: true}})\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    userChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    afterLoginPage = (user) => {\r\n        if(user.rank === \"CLIENT\")\r\n            return this.props.history.push(\"/clientpage\")\r\n        else if(user.rank === \"WORKER\")\r\n            return this.props.history.push(\"/workerpage\")\r\n        else if(user.rank === \"ADMIN\")\r\n            return this.props.history.push(\"/adminpage\")\r\n    }\r\n\r\n    render() {\r\n        const {email, password} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <Card className={\"border border-dark text-black bg-trans\"}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/> Log in</Card.Header>\r\n                    <Form id={\"LoginFormId\"} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Email\"\r\n                                                  className={\"text-black bg-trans\"} name={\"email\"}\r\n                                                  value={email} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"password\"} placeholder=\"Password\"\r\n                                                  className={\"text-black bg-trans\"}\r\n                                                  name={\"password\"}\r\n                                                  value={password} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"button\" onClick={() => this.findUser(password)}>\r\n                                <FontAwesomeIcon icon={faSave} /> Login\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ClientPage.js",["163","164","165"],"import React, {Component} from \"react\";\r\nimport {Button, Row, Card, Col} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ClientPage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    initialState = {\r\n        email: '',\r\n        userid: localStorage.getItem(\"userID\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.findUserById()\r\n        console.log(this.state.email)\r\n    }\r\n\r\n    findUserById = () => {\r\n        axios.get(\"http://localhost:8080/api/Users?index=\"+this.state.userid)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    console.log(response)\r\n                    this.setState({\r\n                        \"email\": response.data.email\r\n                    })\r\n                }\r\n            })\r\n        }\r\n\r\n    visitCalendar = () => {\r\n        return this.props.history.push(\"/visitCalendar\")\r\n    }\r\n\r\n    booking = () => {\r\n        return this.props.history.push(\"/booking\")\r\n    }\r\n\r\n    animalManager = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const cardStyle = {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n        }\r\n        const buttonStyle = {\r\n            backgroundColor: 'rgba(255, 255, 255, 0.4)',\r\n            color: 'black',\r\n            height: '25vh',\r\n            width: '50vh',\r\n            borderRadius: '40px',\r\n            fontWeight: 'bold',\r\n            fontSize: 20\r\n        }\r\n        const buttonStyle2 = {\r\n            /*backgroundColor: 'rgba(255, 255, 255, 0.9)',*/\r\n            color: 'black',\r\n            height: '25vh',\r\n            width: '50vh',\r\n            borderRadius: '40px',\r\n            fontWeight: 'bold',\r\n            fontSize: 20\r\n        }\r\n\r\n\r\n        return(\r\n            <Card className={\"border border-dark text-black bg-trans\"}>\r\n                <Card.Header className={\"text-center\"} style={{fontWeight: 'bold', fontSize: 25}}>\r\n                    Welcome to Client Panel!\r\n                </Card.Header>\r\n\r\n                <Card.Body >\r\n                    <Row>\r\n                        <Col className={\"user-text\"}>\r\n                            <p style={{fontSize: 40}}>User:</p>\r\n                            <p>{this.state.email}</p>\r\n                        </Col>\r\n                        <Col className={\"text-center\"}>\r\n                            <Button className={\"border border-dark btn-panel\"} onClick={this.booking}>\r\n                                Booking\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{paddingTop: 20}}>\r\n                        <Col className={\"text-center\"}>\r\n                            <Button className={\"border border-dark btn-panel\"} onClick={this.animalManager}>\r\n                                Animal Manager\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className={\"text-center\"}>\r\n                            <Button className={\"border border-dark btn-panel\"} onClick={this.visitCalendar}>\r\n                                Visit Calendar\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )}\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\VisitCalendar.js",["166","167","168","169","170"],"import {React, Component} from \"react\";\r\nimport {Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class VisitCalendar extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userid: localStorage.getItem(\"userID\"),\r\n            visits: [],\r\n            data2: [],\r\n            currentPage: 1,\r\n            visitsPerPage: 5,\r\n            };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Visits/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                data.map(visit => {\r\n                    if (visit.client.id == this.state.userid) {\r\n                            this.state.data2.push(visit)\r\n                    }\r\n                })\r\n\r\n                this.setState({\r\n                    \"visits\": this.state.data2\r\n                })\r\n            })\r\n    }\r\n\r\n    deleteVisit = (visitId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Visits?index=\" + visitId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        visits: this.state.visits.filter(visit => visit.visitID !== visitId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.visits.length / this.state.visitsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.visits.length / this.state.visitsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.visits.length / this.state.visitsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    panel = () => {\r\n        return this.props.history.push(\"/clientpage\")\r\n    }\r\n\r\n    render(){\r\n\r\n        const {visits, currentPage, visitsPerPage} = this.state;\r\n        const lastIndex = currentPage * visitsPerPage;\r\n        const firstIndex = lastIndex - visitsPerPage;\r\n        const currentVisits = visits.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.visits.length / this.state.visitsPerPage)\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Visit deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white bg-trans\"}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Visits List\r\n                        </div>\r\n                        <div style={{\"float\":\"right\", fontWeight: 'bold', color: 'black'}}>\r\n                            <Button className={\"back-btn\"} style={{marginLeft: 0}} onClick={this.panel}>\r\n                                Back to Panel\r\n                            </Button>\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary bg-trans\"}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Day</th>\r\n                                <th>Time</th>\r\n                                <th>Animal</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {visits.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{visits.length}</td>\r\n                                </tr>   :\r\n                                currentVisits.map((visit) => (\r\n                                    <tr key={visit.id}>\r\n                                        <td>\r\n                                            {visit.day}\r\n                                        </td>\r\n                                        <td>\r\n                                            {visit.time}\r\n                                        </td>\r\n                                        <td>\r\n                                            {visit.animal.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                {/*<Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>*/}\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteVisit.bind(this, visit.visitID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\BookingPage.js",["171","172","173","174","175","176","177","178","179","180","181","182","183"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\WorkerPage.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AdminPage.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAddAdmin.js",["184"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\nimport \"./CSS/Style.css\"\r\n\r\nexport default class UserAddAdmin extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.userChange = this.userChange.bind(this);\r\n        this.SubmitUser = this.SubmitUser.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", email: \"\", rank: \"\", password: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userId = +this.props.match.params.id;\r\n        if(userId != null){\r\n            this.finUserById(userId);\r\n        }\r\n    }\r\n\r\n    finUserById = (UserId) => {\r\n        axios.get(\"http://localhost:8080/api/Users?index=\"+UserId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        email: response.data.email,\r\n                        rank: response.data.rank,\r\n                        password: response.data.password\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            id : this.state.id,\r\n            password: this.state.password,\r\n            email: this.state.email,\r\n            rank: this.state.rank\r\n        }\r\n        console.log(user)\r\n\r\n        axios.put(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.usersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            email: this.state.email,\r\n            rank: \"CLIENT\",\r\n            password: this.state.password\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"post\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.usersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    userChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    usersList = () => {\r\n        return this.props.history.push(\"/users\")\r\n    }\r\n\r\n    render() {\r\n        const {id, email, rank, password} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"User updated Successfully.\" : \"User saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black bg-trans\"}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update User\" : \" Add new User\"}</Card.Header>\r\n                    <Form id={\"UserFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateUser : this.SubmitUser} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Email\"\r\n                                                  className={\"text-black bg-trans\"} name={\"email\"}\r\n                                                  value={email} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"password\"} placeholder=\"Password\"\r\n                                                  className={\"text-black bg-trans\"}\r\n                                                  name={\"password\"}\r\n                                                  value={password} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Rank</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Rank\"\r\n                                                  className={\"text-black bg-trans\"}\r\n                                                  name={\"rank\"}\r\n                                                  value={rank} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            {this.state.id !== \"\" ?\r\n                                <Button variant=\"info\" type=\"button\" onClick={this.usersList.bind()}>\r\n                                    <FontAwesomeIcon icon={faList}/> Users List\r\n                                </Button> : null\r\n                            }\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalListAdmin.js",["185","186","187"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faList,\r\n    faEdit,\r\n    faTrash,\r\n    faStepBackward,\r\n    faStepForward,\r\n    faFastBackward,\r\n    faFastForward,\r\n    faSearch, faTimes\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class AnimalListAdmin extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animals: [],\r\n            animalsSearch: [],\r\n            search: '',\r\n            data2: [],\r\n            currentPage: 1,\r\n            animalsPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAnimals()\r\n    }\r\n\r\n    getAnimals = () => {\r\n        axios.get(\"http://localhost:8080/api/Animals/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                data.map(animal => {\r\n                    this.state.data2.push(animal)\r\n                })\r\n\r\n                console.log(this.state.data2)\r\n                this.setState({\r\n                    \"animals\": this.state.data2\r\n                })\r\n            })\r\n    }\r\n\r\n    findAnimalByName = (animalName) => {\r\n        this.state.animals.map(animal => {\r\n            if(animal.name === animalName){\r\n                this.state.animalsSearch.push(animal)\r\n            }\r\n        })\r\n    }\r\n\r\n    switchAnimals = (name) => {\r\n        this.findAnimalByName(name)\r\n        this.setState({\r\n            \"animals\": this.state.animalsSearch\r\n        })\r\n    }\r\n\r\n    cancelSearch = () => {\r\n        this.setState({\r\n            \"search\": '',\r\n            \"animalsSearch\": []\r\n        })\r\n        this.getAnimals()\r\n    }\r\n\r\n    searchChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    deleteAnimal = (animalId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Animals?index=\" + animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        animals: this.state.animals.filter(animal => animal.animalID !== animalId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    panel = () => {\r\n        return this.props.history.push(\"/adminpage\")\r\n    }\r\n\r\n    render(){\r\n\r\n        const {animals, currentPage, animalsPerPage, search} = this.state;\r\n        const lastIndex = currentPage * animalsPerPage;\r\n        const firstIndex = lastIndex - animalsPerPage;\r\n        const currentAnimals = animals.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Animal deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white bg-trans\"}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Animal List\r\n                        </div>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <Button className={\"back-btn\"} onClick={this.panel}>\r\n                                Back to Panel\r\n                            </Button>\r\n                        </div>\r\n                        <div style={{\"float\":\"right\", fontWeight: 'bold', color: 'black'}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <FormControl placeholder={\"Search\"} name={\"search\"} value={search}\r\n                                             className={\"text-black info-border\"} onChange={this.searchChange} />\r\n                                <InputGroup.Append>\r\n                                    <Button size={\"sm\"} variant={\"outline-info\"}\r\n                                            type={\"button\"} onClick={() => this.switchAnimals(search)}>\r\n                                        <FontAwesomeIcon icon={faSearch}/>\r\n                                    </Button>\r\n                                    <Button size={\"sm\"} variant={\"outline-danger\"}\r\n                                            type={\"button\"} onClick={this.cancelSearch}>\r\n                                        <FontAwesomeIcon icon={faTimes}/>\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary bg-trans\"}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Name</th>\r\n                                <th>Age</th>\r\n                                <th>Type</th>\r\n                                <th>Owner</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {animals.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{animals.length}</td>\r\n                                </tr>   :\r\n                                currentAnimals.map((animal) => (\r\n                                    <tr key={animal.id}>\r\n                                        <td>\r\n                                            {animal.animalID}\r\n                                        </td>\r\n                                        <td>\r\n                                            {animal.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            {animal.age}\r\n                                        </td>\r\n                                        <td>\r\n                                            {animal.typ}\r\n                                        </td>\r\n                                        <td>\r\n                                            {animal.owner.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteAnimal.bind(this, animal.animalID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal}\r\n                       onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\VisitsAdmin.js",["188","189","190","191"],"import {React, Component} from \"react\";\r\nimport {Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./CSS/Style.css\"\r\n\r\n\r\nexport default class VisitsAdmin extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visits: [],\r\n            data2: [],\r\n            currentPage: 1,\r\n            visitsPerPage: 5,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Visits/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                data.map(visit => {\r\n                    this.state.data2.push(visit)\r\n                })\r\n\r\n                this.setState({\r\n                    \"visits\": this.state.data2\r\n                })\r\n            })\r\n    }\r\n\r\n    deleteVisit = (visitId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Visits?index=\" + visitId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        visits: this.state.visits.filter(visit => visit.visitID !== visitId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.visits.length / this.state.visitsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.visits.length / this.state.visitsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.visits.length / this.state.visitsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    panel = () => {\r\n        console.log(localStorage.getItem(\"userRank\"))\r\n        if(localStorage.getItem(\"userRank\") === \"ADMIN\")\r\n            return this.props.history.push(\"/adminpage\")\r\n        else if(localStorage.getItem(\"userRank\") === \"WORKER\")\r\n            return this.props.history.push(\"/workerpage\")\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const {visits, currentPage, visitsPerPage} = this.state;\r\n        const lastIndex = currentPage * visitsPerPage;\r\n        const firstIndex = lastIndex - visitsPerPage;\r\n        const currentVisits = visits.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.visits.length / this.state.visitsPerPage)\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Visit deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white bg-trans\"}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Visits List\r\n                        </div>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <Button size={\"sm\"} className={\"back-btn\"} onClick={this.panel}>\r\n                                Back to Panel\r\n                            </Button>\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary bg-trans\"}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Day</th>\r\n                                <th>Time</th>\r\n                                <th>Animal</th>\r\n                                <th>Client</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {visits.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{visits.length}</td>\r\n                                </tr>   :\r\n                                currentVisits.map((visit) => (\r\n                                    <tr key={visit.id}>\r\n                                        <td>\r\n                                            {visit.day}\r\n                                        </td>\r\n                                        <td>\r\n                                            {visit.time}\r\n                                        </td>\r\n                                        <td>\r\n                                            {visit.animal.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            {visit.client.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                {/*<Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>*/}\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteVisit.bind(this, visit.visitID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl className={\"pageNumCss\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-dark\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAddModal.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\text.js",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":2,"column":29,"nodeType":"198","messageId":"199","endLine":2,"endColumn":35},{"ruleId":"196","severity":1,"message":"200","line":112,"column":27,"nodeType":"198","messageId":"199","endLine":112,"endColumn":35},{"ruleId":"196","severity":1,"message":"201","line":2,"column":68,"nodeType":"198","messageId":"199","endLine":2,"endColumn":71},{"ruleId":"202","severity":1,"message":"203","line":31,"column":33,"nodeType":"204","messageId":"205","endLine":31,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":33,"column":45,"nodeType":"208","messageId":"209","endLine":33,"endColumn":47},{"ruleId":"196","severity":1,"message":"210","line":2,"column":9,"nodeType":"198","messageId":"199","endLine":2,"endColumn":14},{"ruleId":"196","severity":1,"message":"201","line":2,"column":68,"nodeType":"198","messageId":"199","endLine":2,"endColumn":71},{"ruleId":"196","severity":1,"message":"211","line":17,"column":8,"nodeType":"198","messageId":"199","endLine":17,"endColumn":19},{"ruleId":"202","severity":1,"message":"203","line":49,"column":35,"nodeType":"204","messageId":"205","endLine":49,"endColumn":37},{"ruleId":"196","severity":1,"message":"212","line":3,"column":17,"nodeType":"198","messageId":"199","endLine":3,"endColumn":21},{"ruleId":"196","severity":1,"message":"213","line":4,"column":8,"nodeType":"198","messageId":"199","endLine":4,"endColumn":14},{"ruleId":"196","severity":1,"message":"200","line":119,"column":27,"nodeType":"198","messageId":"199","endLine":119,"endColumn":35},{"ruleId":"192","replacedBy":"214"},{"ruleId":"194","replacedBy":"215"},{"ruleId":"196","severity":1,"message":"216","line":5,"column":17,"nodeType":"198","messageId":"199","endLine":5,"endColumn":23},{"ruleId":"202","severity":1,"message":"203","line":39,"column":33,"nodeType":"204","messageId":"205","endLine":39,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":41,"column":45,"nodeType":"208","messageId":"209","endLine":41,"endColumn":47},{"ruleId":"196","severity":1,"message":"200","line":100,"column":27,"nodeType":"198","messageId":"199","endLine":100,"endColumn":35},{"ruleId":"196","severity":1,"message":"217","line":107,"column":16,"nodeType":"198","messageId":"199","endLine":107,"endColumn":18},{"ruleId":"196","severity":1,"message":"218","line":107,"column":27,"nodeType":"198","messageId":"199","endLine":107,"endColumn":31},{"ruleId":"196","severity":1,"message":"201","line":2,"column":68,"nodeType":"198","messageId":"199","endLine":2,"endColumn":71},{"ruleId":"196","severity":1,"message":"219","line":107,"column":15,"nodeType":"198","messageId":"199","endLine":107,"endColumn":25},{"ruleId":"220","severity":1,"message":"221","line":59,"column":9,"nodeType":"222","messageId":"223","endLine":59,"endColumn":29},{"ruleId":"196","severity":1,"message":"201","line":2,"column":68,"nodeType":"198","messageId":"199","endLine":2,"endColumn":71},{"ruleId":"196","severity":1,"message":"224","line":2,"column":27,"nodeType":"198","messageId":"199","endLine":2,"endColumn":36},{"ruleId":"196","severity":1,"message":"212","line":2,"column":38,"nodeType":"198","messageId":"199","endLine":2,"endColumn":42},{"ruleId":"196","severity":1,"message":"216","line":5,"column":17,"nodeType":"198","messageId":"199","endLine":5,"endColumn":23},{"ruleId":"202","severity":1,"message":"203","line":33,"column":35,"nodeType":"204","messageId":"205","endLine":33,"endColumn":37},{"ruleId":"196","severity":1,"message":"225","line":49,"column":15,"nodeType":"198","messageId":"199","endLine":49,"endColumn":24},{"ruleId":"196","severity":1,"message":"226","line":52,"column":15,"nodeType":"198","messageId":"199","endLine":52,"endColumn":26},{"ruleId":"196","severity":1,"message":"227","line":61,"column":15,"nodeType":"198","messageId":"199","endLine":61,"endColumn":27},{"ruleId":"196","severity":1,"message":"201","line":2,"column":61,"nodeType":"198","messageId":"199","endLine":2,"endColumn":64},{"ruleId":"196","severity":1,"message":"228","line":4,"column":17,"nodeType":"198","messageId":"199","endLine":4,"endColumn":23},{"ruleId":"196","severity":1,"message":"229","line":7,"column":9,"nodeType":"198","messageId":"199","endLine":7,"endColumn":13},{"ruleId":"202","severity":1,"message":"203","line":28,"column":32,"nodeType":"204","messageId":"205","endLine":28,"endColumn":34},{"ruleId":"206","severity":1,"message":"207","line":29,"column":41,"nodeType":"208","messageId":"209","endLine":29,"endColumn":43},{"ruleId":"196","severity":1,"message":"230","line":2,"column":9,"nodeType":"198","messageId":"199","endLine":2,"endColumn":17},{"ruleId":"196","severity":1,"message":"231","line":2,"column":39,"nodeType":"198","messageId":"199","endLine":2,"endColumn":42},{"ruleId":"196","severity":1,"message":"232","line":2,"column":44,"nodeType":"198","messageId":"199","endLine":2,"endColumn":58},{"ruleId":"196","severity":1,"message":"228","line":5,"column":9,"nodeType":"198","messageId":"199","endLine":5,"endColumn":15},{"ruleId":"196","severity":1,"message":"233","line":5,"column":47,"nodeType":"198","messageId":"199","endLine":5,"endColumn":53},{"ruleId":"202","severity":1,"message":"203","line":30,"column":33,"nodeType":"204","messageId":"205","endLine":30,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":32,"column":45,"nodeType":"208","messageId":"209","endLine":32,"endColumn":47},{"ruleId":"202","severity":1,"message":"203","line":46,"column":32,"nodeType":"204","messageId":"205","endLine":46,"endColumn":34},{"ruleId":"202","severity":1,"message":"203","line":60,"column":33,"nodeType":"204","messageId":"205","endLine":60,"endColumn":35},{"ruleId":"206","severity":1,"message":"207","line":62,"column":45,"nodeType":"208","messageId":"209","endLine":62,"endColumn":47},{"ruleId":"206","severity":1,"message":"207","line":63,"column":44,"nodeType":"208","messageId":"209","endLine":63,"endColumn":46},{"ruleId":"202","severity":1,"message":"203","line":77,"column":37,"nodeType":"204","messageId":"205","endLine":77,"endColumn":39},{"ruleId":"234","severity":1,"message":"235","line":86,"column":27,"nodeType":"236","endLine":86,"endColumn":37},{"ruleId":"196","severity":1,"message":"217","line":108,"column":16,"nodeType":"198","messageId":"199","endLine":108,"endColumn":18},{"ruleId":"196","severity":1,"message":"201","line":2,"column":68,"nodeType":"198","messageId":"199","endLine":2,"endColumn":71},{"ruleId":"202","severity":1,"message":"203","line":45,"column":33,"nodeType":"204","messageId":"205","endLine":45,"endColumn":35},{"ruleId":"202","severity":1,"message":"203","line":57,"column":39,"nodeType":"204","messageId":"205","endLine":57,"endColumn":41},{"ruleId":"196","severity":1,"message":"201","line":2,"column":61,"nodeType":"198","messageId":"199","endLine":2,"endColumn":64},{"ruleId":"196","severity":1,"message":"228","line":4,"column":17,"nodeType":"198","messageId":"199","endLine":4,"endColumn":23},{"ruleId":"196","severity":1,"message":"229","line":7,"column":9,"nodeType":"198","messageId":"199","endLine":7,"endColumn":13},{"ruleId":"202","severity":1,"message":"203","line":27,"column":32,"nodeType":"204","messageId":"205","endLine":27,"endColumn":34},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'animalID' is assigned a value but never used.","'Nav' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Modal' is defined but never used.","'AnimalModal' is defined but never used.","'Card' is defined but never used.","'Animal' is defined but never used.",["237"],["238"],"'faList' is defined but never used.","'id' is assigned a value but never used.","'rank' is assigned a value but never used.","'pageNumCss' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Container' is defined but never used.","'cardStyle' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'buttonStyle2' is assigned a value but never used.","'faEdit' is defined but never used.","'Link' is defined but never used.","'Dropdown' is defined but never used.","'Row' is defined but never used.","'DropdownButton' is defined but never used.","'faUndo' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]