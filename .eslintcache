[{"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js":"1","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js":"2","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js":"3","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js":"4","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Welcome.js":"5","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js":"6","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js":"7","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js":"8","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js":"9","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js":"10","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js":"11","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js":"12","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js":"13","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js":"14","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js":"15","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js":"16","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":2437,"mtime":1612961971386,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1537,"mtime":1612962073842,"results":"22","hashOfConfig":"19"},{"size":487,"mtime":1612879429964,"results":"23","hashOfConfig":"19"},{"size":691,"mtime":1612881350819,"results":"24","hashOfConfig":"19"},{"size":6874,"mtime":1612900878256,"results":"25","hashOfConfig":"19"},{"size":9191,"mtime":1612901485991,"results":"26","hashOfConfig":"19"},{"size":1111,"mtime":1611428966936,"results":"27","hashOfConfig":"19"},{"size":8610,"mtime":1612894695940,"results":"28","hashOfConfig":"19"},{"size":6839,"mtime":1612297680322,"results":"29","hashOfConfig":"19"},{"size":5229,"mtime":1612900963755,"results":"30","hashOfConfig":"19"},{"size":6533,"mtime":1612958706840,"results":"31","hashOfConfig":"19"},{"size":8518,"mtime":1612958098466,"results":"32","hashOfConfig":"19"},{"size":6325,"mtime":1612958636116,"results":"33","hashOfConfig":"19"},{"size":8752,"mtime":1612961958824,"results":"34","hashOfConfig":"19"},{"size":6324,"mtime":1612962009917,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1mage9g",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js",[],["79","80"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Welcome.js",["81","82"],"import React, {Component} from \"react\";\r\nimport {Jumbotron} from \"react-bootstrap\";\r\nimport image from \"../images/index-background.jpeg\"\r\n\r\nexport default class Welcome extends Component{\r\n    render() {\r\n        return(\r\n               /* <Jumbotron className={\"bg-dark text-white\"}>\r\n                    <h1>Vet Page</h1>\r\n                    <p>\r\n                        bla bla bla\r\n                    </p>\r\n                </Jumbotron>*/\r\n            <p></p>\r\n        )\r\n    }\r\n}\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js",["83"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class Animal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n           this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"}\r\n                      style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black\"} name={\"age\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black\"} name={\"typ\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Animal List\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js",["84"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class AnimalList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animals: [],\r\n            currentPage: 1,\r\n            animalsPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Animals/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({animals: data})\r\n            })\r\n    };\r\n\r\n    deleteAnimal = (animalId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Animals?index=\" + animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                        this.setState({\"show\":true});\r\n                        setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                        this.setState({\r\n                        animals: this.state.animals.filter(animal => animal.animalID !== animalId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    // handleShowWithParams = (animalId) => {\r\n    //     this.setState({\r\n    //         showModalEdit: true\r\n    //     })\r\n    // }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            showModal: false\r\n\r\n        },\r\n        console.log(\"asdasd\")\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {animals, currentPage, animalsPerPage} = this.state;\r\n        const lastIndex = currentPage * animalsPerPage;\r\n        const firstIndex = lastIndex - animalsPerPage;\r\n        const currentAnimals = animals.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n            <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                <MyToast show = {this.state.show} message = {\"Animal deleted Successfully.\"} type = {\"danger\"}/>\r\n            </div>\r\n            <Card className={\"border border-dark text-white\"} style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n            }}>\r\n                <Card.Header>\r\n                    <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                        <FontAwesomeIcon icon={faList}/> Animal List\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <Button size={\"sm\"} onClick={this.handleShow}>\r\n                            Add Animal\r\n                        </Button>\r\n                    </div>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Table bordered hover striped variant={\"secondary\"} style={{\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                    }}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Age</th>\r\n                            <th>Type</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {animals.length === 0 ?\r\n                            <tr align={\"center\"}>\r\n                                <td colSpan={\"6\"}>{animals.length}</td>\r\n                            </tr>   :\r\n                            currentAnimals.map((animal) => (\r\n                                <tr key={animal.id}>\r\n                                    <td>\r\n                                        {animal.animalID}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.age}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.typ}\r\n                                    </td>\r\n                                    <td>\r\n                                        <ButtonGroup>\r\n                                            <Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                            <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteAnimal.bind(this, animal.animalID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            {/*<Button onClick={this.handleShowWithParams(animal.animalID)} className={\"btn btn-sm btn-outline-primary\"}><FontAwesomeIcon icon={faEdit}/></Button>*/}\r\n                                        </ButtonGroup>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <div style={{\"float\":\"left\", color: 'black'}}>\r\n                        Showing page {currentPage} of {totalPages}\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <InputGroup size={\"sm\"}>\r\n                            <InputGroup.Prepend>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                onClick={this.firstPage}>\r\n                                    <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                        onClick={this.prevPage}>\r\n                                    <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                            onChange={this.changePage}/>\r\n                            <InputGroup.Append>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.nextPage}>\r\n                                    <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.lastPage}>\r\n                                    <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal}\r\n                       onHide={this.handleClose} onClick={this.handleClose}>\r\n                        <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js",["85"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class UserList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            currentPage: 1,\r\n            usersPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Users/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({users: data})\r\n            })\r\n    };\r\n\r\n    deleteUser = (userId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Users?index=\" + userId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        users: this.state.users.filter(user => user.id !== userId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {users, currentPage, usersPerPage} = this.state;\r\n        const lastIndex = currentPage * usersPerPage;\r\n        const firstIndex = lastIndex - usersPerPage;\r\n        const currentUsers = users.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"User deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Users List\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Email</th>\r\n                                <th>Rank</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {users.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{users.length}</td>\r\n                                </tr>   :\r\n                                currentUsers.map((u) => (\r\n                                    <tr key={u.id}>\r\n                                        <td>\r\n                                            {u.id}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.rank}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"editu/\"+u.id} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteUser.bind(this, u.id)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js",["86","87","88"],"import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport {Button, Card, Form, Modal} from \"react-bootstrap\";\r\nimport Animal from \"./Animal\";\r\nimport MyToast from \"./MyToast\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ModalTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\", show: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n            this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div style={{\"display\": this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show={this.state.show} message={this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type={\"success\"}/>\r\n                </div>\r\n                <Modal show={this.state.show} onHide={this.handleClose} className={\"border border-dark bg-dark text-white\"}>\r\n                    <Modal.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Modal.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Modal.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"bg-dark text-white\"} name={\"name\"}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"bg-dark text-white\"} name={\"age\"}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"bg-dark text-white\"} name={\"typ\"}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave}/> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo}/> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList}/> Animal List\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}",["89","90"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js",["91","92"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class AnimalModal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"}\r\n                      style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black\"} name={\"age\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black\"} name={\"typ\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> Save\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.props.onClick}> Close\r\n                            </Button>{' '}\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js",["93","94"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js",["95"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js",["96"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js",["97","98","99","100"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class Storage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            supplies: [],\r\n            currentPage: 1,\r\n            suppliesPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Supplies/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({supplies: data})\r\n            })\r\n    };\r\n\r\n    deleteSupply = (supplyId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Supplies?index=\" + supplyId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        supplies: this.state.supplies.filter(supply => supply.supplyID !== supplyId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {supplies, currentPage, suppliesPerPage} = this.state;\r\n        const lastIndex = currentPage * suppliesPerPage;\r\n        const firstIndex = lastIndex - suppliesPerPage;\r\n        const currentSupplies = supplies.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Supply deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Storage\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Name</th>\r\n                                <th>Amount</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {supplies.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{supplies.length}</td>\r\n                                </tr>   :\r\n                                currentSupplies.map((supply) => (\r\n                                    <tr key={supply.id}>\r\n                                        <td>\r\n                                            {supply.supplyID}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.amount}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edits/\"+supply.supplyID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteSupply.bind(this, supply.supplyID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":9,"nodeType":"107","messageId":"108","endLine":2,"endColumn":18},{"ruleId":"105","severity":1,"message":"109","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":13},{"ruleId":"105","severity":1,"message":"110","line":105,"column":27,"nodeType":"107","messageId":"108","endLine":105,"endColumn":35},{"ruleId":"105","severity":1,"message":"111","line":2,"column":68,"nodeType":"107","messageId":"108","endLine":2,"endColumn":71},{"ruleId":"105","severity":1,"message":"111","line":2,"column":68,"nodeType":"107","messageId":"108","endLine":2,"endColumn":71},{"ruleId":"105","severity":1,"message":"112","line":3,"column":17,"nodeType":"107","messageId":"108","endLine":3,"endColumn":21},{"ruleId":"105","severity":1,"message":"113","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"110","line":119,"column":27,"nodeType":"107","messageId":"108","endLine":119,"endColumn":35},{"ruleId":"101","replacedBy":"114"},{"ruleId":"103","replacedBy":"115"},{"ruleId":"105","severity":1,"message":"116","line":5,"column":17,"nodeType":"107","messageId":"108","endLine":5,"endColumn":23},{"ruleId":"105","severity":1,"message":"110","line":60,"column":27,"nodeType":"107","messageId":"108","endLine":60,"endColumn":35},{"ruleId":"105","severity":1,"message":"117","line":107,"column":16,"nodeType":"107","messageId":"108","endLine":107,"endColumn":18},{"ruleId":"105","severity":1,"message":"118","line":107,"column":27,"nodeType":"107","messageId":"108","endLine":107,"endColumn":31},{"ruleId":"105","severity":1,"message":"111","line":2,"column":68,"nodeType":"107","messageId":"108","endLine":2,"endColumn":71},{"ruleId":"119","severity":1,"message":"120","line":59,"column":9,"nodeType":"121","messageId":"122","endLine":59,"endColumn":29},{"ruleId":"105","severity":1,"message":"111","line":2,"column":68,"nodeType":"107","messageId":"108","endLine":2,"endColumn":71},{"ruleId":"105","severity":1,"message":"123","line":4,"column":17,"nodeType":"107","messageId":"108","endLine":4,"endColumn":23},{"ruleId":"105","severity":1,"message":"124","line":4,"column":25,"nodeType":"107","messageId":"108","endLine":4,"endColumn":32},{"ruleId":"105","severity":1,"message":"125","line":7,"column":9,"nodeType":"107","messageId":"108","endLine":7,"endColumn":13},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar","'image' is defined but never used.","'animalID' is assigned a value but never used.","'Nav' is defined but never used.","'Card' is defined but never used.","'Animal' is defined but never used.",["126"],["127"],"'faList' is defined but never used.","'id' is assigned a value but never used.","'rank' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]