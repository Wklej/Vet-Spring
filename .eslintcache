[{"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js":"1","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js":"2","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js":"3","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js":"4","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Welcome.js":"5","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js":"6","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js":"7","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js":"8","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js":"9","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js":"10","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js":"11","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js":"12","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js":"13","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js":"14","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js":"15","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js":"16","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js":"17","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Booking.js":"18","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Login.js":"19"},{"size":591,"mtime":1612994969376,"results":"20","hashOfConfig":"21"},{"size":2679,"mtime":1612992910117,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":2106,"mtime":1612994993599,"results":"24","hashOfConfig":"21"},{"size":487,"mtime":1612879429964,"results":"25","hashOfConfig":"21"},{"size":691,"mtime":1612881350819,"results":"26","hashOfConfig":"21"},{"size":6874,"mtime":1612900878256,"results":"27","hashOfConfig":"21"},{"size":9191,"mtime":1612901485991,"results":"28","hashOfConfig":"21"},{"size":1111,"mtime":1611428966936,"results":"29","hashOfConfig":"21"},{"size":8675,"mtime":1612983239162,"results":"30","hashOfConfig":"21"},{"size":6839,"mtime":1612297680322,"results":"31","hashOfConfig":"21"},{"size":5229,"mtime":1612900963755,"results":"32","hashOfConfig":"21"},{"size":6533,"mtime":1612958706840,"results":"33","hashOfConfig":"21"},{"size":8518,"mtime":1612958098466,"results":"34","hashOfConfig":"21"},{"size":6325,"mtime":1612958636116,"results":"35","hashOfConfig":"21"},{"size":8752,"mtime":1612961958824,"results":"36","hashOfConfig":"21"},{"size":6324,"mtime":1612962009917,"results":"37","hashOfConfig":"21"},{"size":1846,"mtime":1612996547444,"results":"38","hashOfConfig":"21"},{"size":4116,"mtime":1612994492168,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mage9g",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\index.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\App.js",[],["90","91"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\reportWebVitals.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\NavBar.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Welcome.js",["92","93"],"import React, {Component} from \"react\";\r\nimport {Jumbotron} from \"react-bootstrap\";\r\nimport image from \"../images/index-background.jpeg\"\r\n\r\nexport default class Welcome extends Component{\r\n    render() {\r\n        return(\r\n               /* <Jumbotron className={\"bg-dark text-white\"}>\r\n                    <h1>Vet Page</h1>\r\n                    <p>\r\n                        bla bla bla\r\n                    </p>\r\n                </Jumbotron>*/\r\n            <p></p>\r\n        )\r\n    }\r\n}\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Footer.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Animal.js",["94"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class Animal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n           this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"}\r\n                      style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black\"} name={\"age\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black\"} name={\"typ\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Animal List\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalList.js",["95"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class AnimalList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animals: [],\r\n            currentPage: 1,\r\n            animalsPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Animals/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({animals: data})\r\n            })\r\n    };\r\n\r\n    deleteAnimal = (animalId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Animals?index=\" + animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                        this.setState({\"show\":true});\r\n                        setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                        this.setState({\r\n                        animals: this.state.animals.filter(animal => animal.animalID !== animalId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.animals.length / this.state.animalsPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    // handleShowWithParams = (animalId) => {\r\n    //     this.setState({\r\n    //         showModalEdit: true\r\n    //     })\r\n    // }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            showModal: false\r\n\r\n        },\r\n        console.log(\"asdasd\")\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {animals, currentPage, animalsPerPage} = this.state;\r\n        const lastIndex = currentPage * animalsPerPage;\r\n        const firstIndex = lastIndex - animalsPerPage;\r\n        const currentAnimals = animals.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.animals.length / this.state.animalsPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n            <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                <MyToast show = {this.state.show} message = {\"Animal deleted Successfully.\"} type = {\"danger\"}/>\r\n            </div>\r\n            <Card className={\"border border-dark text-white\"} style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n            }}>\r\n                <Card.Header>\r\n                    <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                        <FontAwesomeIcon icon={faList}/> Animal List\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <Button size={\"sm\"} onClick={this.handleShow}>\r\n                            Add Animal\r\n                        </Button>\r\n                    </div>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Table bordered hover striped variant={\"secondary\"} style={{\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                    }}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Name</th>\r\n                            <th>Age</th>\r\n                            <th>Type</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {animals.length === 0 ?\r\n                            <tr align={\"center\"}>\r\n                                <td colSpan={\"6\"}>{animals.length}</td>\r\n                            </tr>   :\r\n                            currentAnimals.map((animal) => (\r\n                                <tr key={animal.id}>\r\n                                    <td>\r\n                                        {animal.animalID}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.name}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.age}\r\n                                    </td>\r\n                                    <td>\r\n                                        {animal.typ}\r\n                                    </td>\r\n                                    <td>\r\n                                        <ButtonGroup>\r\n                                            <Link to={\"edit/\"+animal.animalID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                            <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteAnimal.bind(this, animal.animalID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            {/*<Button onClick={this.handleShowWithParams(animal.animalID)} className={\"btn btn-sm btn-outline-primary\"}><FontAwesomeIcon icon={faEdit}/></Button>*/}\r\n                                        </ButtonGroup>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <div style={{\"float\":\"left\", color: 'black'}}>\r\n                        Showing page {currentPage} of {totalPages}\r\n                    </div>\r\n                    <div style={{\"float\":\"right\"}}>\r\n                        <InputGroup size={\"sm\"}>\r\n                            <InputGroup.Prepend>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                onClick={this.firstPage}>\r\n                                    <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                        onClick={this.prevPage}>\r\n                                    <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                            onChange={this.changePage}/>\r\n                            <InputGroup.Append>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.nextPage}>\r\n                                    <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                </Button>\r\n                                <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                        onClick={this.lastPage}>\r\n                                    <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div>\r\n                </Card.Footer>\r\n            </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal}\r\n                       onHide={this.handleClose} onClick={this.handleClose}>\r\n                        <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\MyToast.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserList.js",["96"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class UserList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            currentPage: 1,\r\n            usersPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Users/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({users: data})\r\n            })\r\n    };\r\n\r\n    deleteUser = (userId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Users?index=\" + userId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        users: this.state.users.filter(user => user.id !== userId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.users.length / this.state.usersPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {users, currentPage, usersPerPage} = this.state;\r\n        const lastIndex = currentPage * usersPerPage;\r\n        const firstIndex = lastIndex - usersPerPage;\r\n        const currentUsers = users.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.users.length / this.state.usersPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"User deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Users List\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Email</th>\r\n                                <th>Rank</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {users.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{users.length}</td>\r\n                                </tr>   :\r\n                                currentUsers.map((u) => (\r\n                                    <tr key={u.id}>\r\n                                        <td>\r\n                                            {u.id}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.email}\r\n                                        </td>\r\n                                        <td>\r\n                                            {u.rank}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"editu/\"+u.id} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteUser.bind(this, u.id)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\ModalTest.js",["97","98","99"],"import {Component} from \"react\";\r\nimport React from \"react\";\r\nimport {Button, Card, Form, Modal} from \"react-bootstrap\";\r\nimport Animal from \"./Animal\";\r\nimport MyToast from \"./MyToast\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ModalTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\", show: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        const animalId = +this.props.match.params.id;\r\n        if(animalId != null){\r\n            this.finAnimalById(animalId);\r\n        }\r\n    }\r\n\r\n    finAnimalById = (animalId) => {\r\n        axios.get(\"http://localhost:8080/api/Animals?index=\"+animalId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.animalID,\r\n                        name: response.data.name,\r\n                        age: response.data.age,\r\n                        typ: response.data.typ\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            animalID : this.state.id,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.animalList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    animalList = () => {\r\n        return this.props.history.push(\"/list\")\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div style={{\"display\": this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show={this.state.show} message={this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type={\"success\"}/>\r\n                </div>\r\n                <Modal show={this.state.show} onHide={this.handleClose} className={\"border border-dark bg-dark text-white\"}>\r\n                    <Modal.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Modal.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Modal.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"bg-dark text-white\"} name={\"name\"}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"bg-dark text-white\"} name={\"age\"}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"bg-dark text-white\"} name={\"typ\"}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave}/> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo}/> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.animalList.bind()}>\r\n                                <FontAwesomeIcon icon={faList}/> Animal List\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}",["100","101"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\AnimalModal.js",["102","103"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class AnimalModal extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.animalChange = this.animalChange.bind(this);\r\n        this.SubmitAnimal = this.SubmitAnimal.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", name: \"\", age: \"\", typ: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    SubmitAnimal = event => {\r\n        event.preventDefault();\r\n\r\n        const animal = {\r\n            name: this.state.name,\r\n            age: this.state.age,\r\n            typ: this.state.typ\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Animals\", animal)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    animalChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {name, age, animalID, typ} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Animal updated Successfully.\" : \"Animal saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"}\r\n                      style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                    {this.state.id !== \"\" ? \" Update Animal\" : \" Add new Animal\"}</Card.Header>\r\n                    <Form id={\"AnimalFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateAnimal : this.SubmitAnimal} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter a Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Age</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"number\"} placeholder=\"Age\"\r\n                                                  className={\"text-black\"} name={\"age\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={age} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Type</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"text\"} placeholder=\"Type\"\r\n                                                  className={\"text-black\"} name={\"typ\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={typ} onChange={this.animalChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> Save\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"button\" onClick={this.props.onClick}> Close\r\n                            </Button>{' '}\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\UserAdd.js",["104","105"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class UserAdd extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.userChange = this.userChange.bind(this);\r\n        this.SubmitUser = this.SubmitUser.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: \"\", email: \"\", rank: \"\", password: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userId = +this.props.match.params.id;\r\n        if(userId != null){\r\n            this.finUserById(userId);\r\n        }\r\n    }\r\n\r\n    finUserById = (UserId) => {\r\n        axios.get(\"http://localhost:8080/api/Users?index=\"+UserId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        email: response.data.email,\r\n                        rank: response.data.rank,\r\n                        password: response.data.password\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            id : this.state.id,\r\n            password: this.state.password,\r\n            email: this.state.email,\r\n            rank: this.state.rank\r\n        }\r\n        console.log(user)\r\n\r\n        axios.put(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.usersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitUser = event => {\r\n        event.preventDefault();\r\n\r\n        const user = {\r\n            email: this.state.email,\r\n            rank: \"CLIENT\",\r\n            password: this.state.password\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Users\", user)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"post\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.usersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    userChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    usersList = () => {\r\n        return this.props.history.push(\"/users\")\r\n    }\r\n\r\n    render() {\r\n        const {id, email, rank, password} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"User updated Successfully.\" : \"User saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header><FontAwesomeIcon icon={this.state.id !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {this.state.id !== \"\" ? \" Update User\" : \" Add new User\"}</Card.Header>\r\n                    <Form id={\"UserFormId\"} onSubmit={this.state.id !== \"\" ?\r\n                        this.updateUser : this.SubmitUser} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Email\"\r\n                                                  className={\"text-black\"} name={\"email\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={email} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"password\"} placeholder=\"Password\"\r\n                                                  className={\"text-black\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  name={\"password\"}\r\n                                                  value={password} onChange={this.userChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            {this.state.id !== \"\" ?\r\n                                <Button variant=\"info\" type=\"button\" onClick={this.usersList.bind()}>\r\n                                    <FontAwesomeIcon icon={faList}/> Users List\r\n                                </Button> : null\r\n                            }\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrdersList.js",["106"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class OrdersList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            orders: [],\r\n            currentPage: 1,\r\n            ordersPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Orders/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({orders: data})\r\n            })\r\n    };\r\n\r\n    deleteOrder = (orderId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Orders?index=\" + orderId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        orders: this.state.orders.filter(order => order.ordersID !== orderId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.orders.length / this.state.ordersPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {orders, currentPage, ordersPerPage} = this.state;\r\n        const lastIndex = currentPage * ordersPerPage;\r\n        const firstIndex = lastIndex - ordersPerPage;\r\n        const currentOrders = orders.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.orders.length / this.state.ordersPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Order deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Orders List\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Supply</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {orders.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{orders.length}</td>\r\n                                </tr>   :\r\n                                currentOrders.map((order) => (\r\n                                    <tr key={order.id}>\r\n                                        <td>\r\n                                            {order.ordersID}\r\n                                        </td>\r\n                                        <td>\r\n                                             {order.amount}  {order.name}s\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edito/\"+order.ordersID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteOrder.bind(this, order.ordersID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\OrderAdd.js",["107"],"import React, {Component} from \"react\";\r\nimport {Card, Form, Button} from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEdit, faList, faPlusSquare, faSave, faUndo} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\nimport MyToast from \"./MyToast\";\r\n\r\nexport default class OrderAdd extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state.show = false;\r\n        this.orderChange = this.orderChange.bind(this);\r\n        this.SubmitOrder = this.SubmitOrder.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        ordersID: \"\",\r\n        name: \"\",\r\n        amount: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const orderId = +this.props.match.params.id;\r\n        if(orderId != null){\r\n            this.finOrderById(orderId);\r\n        }\r\n    }\r\n\r\n    finOrderById = (OrderId) => {\r\n        axios.get(\"http://localhost:8080/api/Orders?index=\"+OrderId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\r\n                        ordersID: response.data.ordersID,\r\n                        name: response.data.name,\r\n                        amount: response.data.amount\r\n                    })\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error\" + error)\r\n        })\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState(() => this.initialState)\r\n    }\r\n\r\n    updateOrder = event => {\r\n        event.preventDefault();\r\n\r\n        const order = {\r\n            ordersID : this.state.ordersID,\r\n            name: this.state.name,\r\n            amount: this.state.amount\r\n        }\r\n        {console.log(order)}\r\n\r\n        axios.put(\"http://localhost:8080/api/Orders\", order)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"put\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                    setTimeout(() => this.ordersList(), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    SubmitOrder = event => {\r\n        event.preventDefault();\r\n\r\n        const order = {\r\n                name: this.state.name,\r\n                amount: this.state.amount\r\n        }\r\n\r\n        axios.post(\"http://localhost:8080/api/Orders\", order)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true, \"method\":\"post\"})\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000)\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    orderChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    ordersList = () => {\r\n        return this.props.history.push(\"/orders\")\r\n    }\r\n\r\n    render() {\r\n        const {ordersID, name, amount} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ?\r\n                        \"Order updated Successfully.\" : \"Order saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-black\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header><FontAwesomeIcon icon={ordersID !== \"\" ? faEdit : faPlusSquare}/>\r\n                        {ordersID !== \"\" ? \" Update Order\" : \" Add new Order\"}</Card.Header>\r\n                    <Form id={\"OrderFormId\"} onSubmit={ordersID !== \"\" ?\r\n                        this.updateOrder : this.SubmitOrder} onReset={this.resetForm}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type=\"text\" placeholder=\"Enter Name\"\r\n                                                  className={\"text-black\"} name={\"name\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={name} onChange={this.orderChange}/>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId={\"formGridTitle\"}>\r\n                                    <Form.Label>Amount</Form.Label>\r\n                                    <Form.Control required autoComplete={\"off\"} type={\"value\"} placeholder=\"Amount\"\r\n                                                  className={\"text-black\"} name={\"amount\"}\r\n                                                  style={{backgroundColor: 'rgba(255, 255, 255, 0.4)'}}\r\n                                                  value={amount} onChange={this.orderChange}/>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {ordersID !== \"\" ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            {ordersID !== \"\" ?\r\n                                <Button variant=\"info\" type=\"button\" onClick={this.ordersList.bind()}>\r\n                                    <FontAwesomeIcon icon={faList}/> Orders List\r\n                                </Button> : null\r\n                            }\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Storage.js",["108","109","110","111"],"import {React, Component} from \"react\";\r\nimport {Modal, Button, ButtonGroup, Card, FormControl, InputGroup, Nav, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faList, faEdit, faTrash, faStepBackward, faStepForward, faFastBackward, faFastForward} from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios'\r\nimport MyToast from \"./MyToast\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AnimalModal from \"./AnimalModal\";\r\n\r\n\r\nexport default class Storage extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            supplies: [],\r\n            currentPage: 1,\r\n            suppliesPerPage: 5,\r\n            showModal: false,\r\n            showModalEdit: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/api/Supplies/all\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({supplies: data})\r\n            })\r\n    };\r\n\r\n    deleteSupply = (supplyId) =>{\r\n        axios.delete(\"http://localhost:8080/api/Supplies?index=\" + supplyId)\r\n            .then(response => {\r\n                if(response.data != null){\r\n                    this.setState({\"show\":true});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    this.setState({\r\n                        supplies: this.state.supplies.filter(supply => supply.supplyID !== supplyId)\r\n                    });\r\n                } else{\r\n                    this.setState({\"show\":false})\r\n                }\r\n            })\r\n    }\r\n\r\n    changePage = event =>{\r\n        this.setState({\r\n            [event.target.name]: parseInt(event.target.value)\r\n        })\r\n    }\r\n\r\n    firstPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    prevPage = () => {\r\n        if(this.state.currentPage > 1){\r\n            this.setState({\r\n                currentPage: this.state.currentPage - 1\r\n            })\r\n        }\r\n    }\r\n\r\n    nextPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.orders.length / this.state.ordersPerPage)){\r\n            this.setState({\r\n                currentPage: this.state.currentPage + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    lastPage = () => {\r\n        if(this.state.currentPage < Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)){\r\n            this.setState({\r\n                currentPage: Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n            })\r\n        }\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n                showModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n\r\n        const {supplies, currentPage, suppliesPerPage} = this.state;\r\n        const lastIndex = currentPage * suppliesPerPage;\r\n        const firstIndex = lastIndex - suppliesPerPage;\r\n        const currentSupplies = supplies.slice(firstIndex, lastIndex);\r\n        const totalPages = Math.ceil(this.state.supplies.length / this.state.suppliesPerPage)\r\n\r\n        const pageNumCss = {\r\n            width: \"45px\",\r\n            border: \"1px solid #17A2B8\",\r\n            color: \"#17A2B8\",\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\"\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {\"Supply deleted Successfully.\"} type = {\"danger\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark text-white\"} style={{\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                }}>\r\n                    <Card.Header>\r\n                        <div style={{\"float\":\"left\", fontWeight: 'bold', color: 'black'}}>\r\n                            <FontAwesomeIcon icon={faList}/> Storage\r\n                        </div>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Table bordered hover striped variant={\"secondary\"} style={{\r\n                            backgroundColor: 'rgba(255, 255, 255, 0.4)'\r\n                        }}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Name</th>\r\n                                <th>Amount</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {supplies.length === 0 ?\r\n                                <tr align={\"center\"}>\r\n                                    <td colSpan={\"6\"}>{supplies.length}</td>\r\n                                </tr>   :\r\n                                currentSupplies.map((supply) => (\r\n                                    <tr key={supply.id}>\r\n                                        <td>\r\n                                            {supply.supplyID}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.name}\r\n                                        </td>\r\n                                        <td>\r\n                                            {supply.amount}\r\n                                        </td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edits/\"+supply.supplyID} className={\"btn btn-sm btn-outline-primary\"} size={\"sm\"}><FontAwesomeIcon icon={faEdit}/></Link>\r\n                                                <Button size={\"sm\"} variant={\"outline-danger\"} onClick={this.deleteSupply.bind(this, supply.supplyID)}><FontAwesomeIcon icon={faTrash}/></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <div style={{\"float\":\"left\", color: 'black'}}>\r\n                            Showing page {currentPage} of {totalPages}\r\n                        </div>\r\n                        <div style={{\"float\":\"right\"}}>\r\n                            <InputGroup size={\"sm\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.firstPage}>\r\n                                        <FontAwesomeIcon icon={faFastBackward}/> First\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === 1}\r\n                                            onClick={this.prevPage}>\r\n                                        <FontAwesomeIcon icon={faStepBackward}/> Prev\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl style={pageNumCss} className={\"bg-dark\"} name={\"currentPage\"} value={currentPage}\r\n                                             onChange={this.changePage}/>\r\n                                <InputGroup.Append>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.nextPage}>\r\n                                        <FontAwesomeIcon icon={faStepForward}/> Next\r\n                                    </Button>\r\n                                    <Button type={\"button\"} variant={\"outline-info\"} disabled={currentPage === totalPages}\r\n                                            onClick={this.lastPage}>\r\n                                        <FontAwesomeIcon icon={faFastForward}/> Last\r\n                                    </Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n\r\n\r\n                <Modal show={this.state.showModal} onHide={this.handleClose} onClick={this.handleClose}>\r\n                    <AnimalModal />\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\SupplyAdd.js",[],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Booking.js",["112"],"D:\\SZKOLA\\PROGRAMOWANIE\\DO SZKOLY\\sem5\\JavaEE\\Vet\\src\\main\\webapp\\vetweb\\src\\components\\Login.js",["113","114","115"],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":9,"nodeType":"122","messageId":"123","endLine":2,"endColumn":18},{"ruleId":"120","severity":1,"message":"124","line":3,"column":8,"nodeType":"122","messageId":"123","endLine":3,"endColumn":13},{"ruleId":"120","severity":1,"message":"125","line":105,"column":27,"nodeType":"122","messageId":"123","endLine":105,"endColumn":35},{"ruleId":"120","severity":1,"message":"126","line":2,"column":68,"nodeType":"122","messageId":"123","endLine":2,"endColumn":71},{"ruleId":"120","severity":1,"message":"126","line":2,"column":68,"nodeType":"122","messageId":"123","endLine":2,"endColumn":71},{"ruleId":"120","severity":1,"message":"127","line":3,"column":17,"nodeType":"122","messageId":"123","endLine":3,"endColumn":21},{"ruleId":"120","severity":1,"message":"128","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":14},{"ruleId":"120","severity":1,"message":"125","line":119,"column":27,"nodeType":"122","messageId":"123","endLine":119,"endColumn":35},{"ruleId":"116","replacedBy":"129"},{"ruleId":"118","replacedBy":"130"},{"ruleId":"120","severity":1,"message":"131","line":5,"column":17,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"120","severity":1,"message":"125","line":60,"column":27,"nodeType":"122","messageId":"123","endLine":60,"endColumn":35},{"ruleId":"120","severity":1,"message":"132","line":107,"column":16,"nodeType":"122","messageId":"123","endLine":107,"endColumn":18},{"ruleId":"120","severity":1,"message":"133","line":107,"column":27,"nodeType":"122","messageId":"123","endLine":107,"endColumn":31},{"ruleId":"120","severity":1,"message":"126","line":2,"column":68,"nodeType":"122","messageId":"123","endLine":2,"endColumn":71},{"ruleId":"134","severity":1,"message":"135","line":59,"column":9,"nodeType":"136","messageId":"137","endLine":59,"endColumn":29},{"ruleId":"120","severity":1,"message":"126","line":2,"column":68,"nodeType":"122","messageId":"123","endLine":2,"endColumn":71},{"ruleId":"120","severity":1,"message":"138","line":4,"column":17,"nodeType":"122","messageId":"123","endLine":4,"endColumn":23},{"ruleId":"120","severity":1,"message":"139","line":4,"column":25,"nodeType":"122","messageId":"123","endLine":4,"endColumn":32},{"ruleId":"120","severity":1,"message":"140","line":7,"column":9,"nodeType":"122","messageId":"123","endLine":7,"endColumn":13},{"ruleId":"120","severity":1,"message":"141","line":2,"column":19,"nodeType":"122","messageId":"123","endLine":2,"endColumn":28},{"ruleId":"120","severity":1,"message":"131","line":5,"column":17,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"120","severity":1,"message":"142","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":15},{"ruleId":"143","severity":1,"message":"144","line":33,"column":35,"nodeType":"145","messageId":"146","endLine":33,"endColumn":37},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar","'image' is defined but never used.","'animalID' is assigned a value but never used.","'Nav' is defined but never used.","'Card' is defined but never used.","'Animal' is defined but never used.",["147"],["148"],"'faList' is defined but never used.","'id' is assigned a value but never used.","'rank' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'Link' is defined but never used.","'Container' is defined but never used.","'MyToast' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]